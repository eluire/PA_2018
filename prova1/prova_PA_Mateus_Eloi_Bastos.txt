Mateus Eloi da Silva Bastos
Questão 1

#include <stdio.h>
#include<stdlib.h>
#include<stdio.h>
#include<math.h>

int * transmitArray(unsigned char dados[32]){

	int  *bin1, *bin2, *bin3, *bin4,dec = 0, *arr_envio;

	// aloca 4 arrays de inteiros e o array que será enviado 
	bin1 = (int *)malloc(8*sizeof(int));
	bin2 = (int *)malloc(8*sizeof(int));
	bin3 = (int *)malloc(8*sizeof(int));
	bin4 = (int *)malloc(8*sizeof(int));
	arr_envio = (int*)malloc(4*sizeof(int));
    
    // divide o array dados em 4 arrays de 8 bits
	for(int i=0;i<8;i++){

		bin1[i] = dados[i];
	}
	for(i=8;i<16;i++){

		bin2[i] = dados[i];
	}
	for(i=16;i<24;i++){

		bin3[i] = dados[i];
	}
	for(i=24;i<32;i++){

		bin4[i] = dados[i];
	}

 	// cada posição do array à ser enviado recebe o correspondente em decimal do array dividido
	arr_envio[0] = transform_bin_dec(bin1);
	arr_envio[1] = transform_bin_dec(bin2);
	arr_envio[2] = transform_bin_dec(bin3);
	arr_envio[3] = transform_bin_dec(bin4);

 	return arr_envio;
}
void  transmitByte(unsigned  char  byte){
	
	printf("transmitiu  byte  %d",  byte);

}

// função transforma binario em decimal
int transform_bin_dec(int * arr){

	int cont=0,decimal;
	for(i=7;cont<8;i--){
     	if(arr[i]=='1'){
     	decimal+=pow(2,cont);
		}
	cont++;
	}
	return decimal;
}
int main()
{
	unsigned  char  dados[32];
	int  i;
	for(i=0;  i<32;  i++){
		dados[i]  =  rand()%2;
	}
	transmitArray(dados);
	return 0;
}






Mateus Eloi da Silva Bastos 
Questão 2 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int*** mallocMatrix(int x, int y, int z) {
    int ***matrix = (int ***)malloc(x * sizeof(int **));

	for(int i = 0; i < x; i++) {
        matrix[i] = (int **)malloc(y * sizeof(int *));
		
        for(int j = 0; j < y; j++)
			matrix[i][j] = (int *)malloc(z * sizeof(int));
	}

    return matrix;
}

void printMatrix(int ***matrix, int x, int y, int z) {
    for(int i = 0; i < x; i++) {
        printf("  [\n");
        for(int j = 0; j < y; j++) {
            printf("     [");
            for(int k = 0; k < z; k++) {
                printf(" %3d ",matrix[i][j][k]);
            }
            printf("]\n");
        }
        printf("  ]\n");
    }
    printf("]\n");
}

int main() {

    int x, y, z;
    printf("digite as dimenções x,y e z da matriz 3D respectivamente:");
    scanf("%d %d %d", &x, &y, &z);

    // alocando a matriz 3D na memória 
    int ***matrix = mallocMatrix(x, y, z);

    // preenchendo matriz com numeros aleatórios 
    srand(time(NULL));
    for(int i = 0; i < x; i++) {
        for(int j = 0; j < y; j++) {
            for(int k = 0; k < z; k++) {
                matrix[i][j][k] = rand() % 100;
            }
        }
    }

    // alocando a matriz de copia 
    int ***copy_matrix = mallocMatrix(x, y, z);

    memcpy(copy_matrix, matrix, x * y * z * sizeof(int));

    printf("\nMatriz original: [\n");
    printMatrix(matrix, x, y, z);

    printf("\nMatrix copiada: [\n");
    printMatrix(copy_matrix, x, y, z);

    free(matrix);
    free(copy_matrix);

    return 0;

}

